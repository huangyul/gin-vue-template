// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/huangyul/gin-vue-template/internal/ioc"
	"github.com/huangyul/gin-vue-template/internal/pkg/ginx/jwt"
	"github.com/huangyul/gin-vue-template/internal/repository"
	"github.com/huangyul/gin-vue-template/internal/repository/dao"
	"github.com/huangyul/gin-vue-template/internal/service"
	"github.com/huangyul/gin-vue-template/internal/web"
)

import (
	_ "github.com/huangyul/gin-vue-template/internal/pkg/ginx/validator"
)

// Injectors from wire.go:

func InitServer() *gin.Engine {
	handler := jwt.NewHandler()
	v := ioc.InitWebMiddleware(handler)
	db := ioc.InitDB()
	userDao := dao.NewUserDao(db)
	userRepository := repository.NewUserRepository(userDao)
	userService := service.NewUserService(userRepository)
	userHandler := web.NewUserHandler(userService, handler)
	routerHandler := web.NewRouterHandler()
	fileDao := dao.NewFileDao(db)
	fileRepository := repository.NewFileRepository(fileDao)
	fileService := service.NewFileService(fileRepository, userService)
	fileHandler := web.NewFileHandler(fileService)
	v2 := ioc.InitWebHandler(userHandler, routerHandler, fileHandler)
	engine := ioc.InitServer(v, v2)
	return engine
}

// wire.go:

var UserSet = wire.NewSet(jwt.NewHandler, dao.NewUserDao, repository.NewUserRepository, service.NewUserService, web.NewUserHandler)

var FileSet = wire.NewSet(dao.NewFileDao, repository.NewFileRepository, service.NewFileService, web.NewFileHandler)
